// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/proto/crawler_event.proto

package crawlerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CrawlerEventService_CreateCrawlerEvent_FullMethodName = "/crawler.v1.CrawlerEventService/CreateCrawlerEvent"
	CrawlerEventService_GetCrawlerEvents_FullMethodName   = "/crawler.v1.CrawlerEventService/GetCrawlerEvents"
	CrawlerEventService_UpdateCrawlerEvent_FullMethodName = "/crawler.v1.CrawlerEventService/UpdateCrawlerEvent"
	CrawlerEventService_UpdateEventStatus_FullMethodName  = "/crawler.v1.CrawlerEventService/UpdateEventStatus"
)

// CrawlerEventServiceClient is the client API for CrawlerEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlerEventServiceClient interface {
	CreateCrawlerEvent(ctx context.Context, in *CreateCrawlerEventRequest, opts ...grpc.CallOption) (*CreateCrawlerEventResponse, error)
	GetCrawlerEvents(ctx context.Context, in *GetCrawlerEventsRequest, opts ...grpc.CallOption) (*GetCrawlerEventsResponse, error)
	UpdateCrawlerEvent(ctx context.Context, in *UpdateCrawlerEventRequest, opts ...grpc.CallOption) (*UpdateCrawlerEventResponse, error)
	UpdateEventStatus(ctx context.Context, in *UpdateEventStatusRequest, opts ...grpc.CallOption) (*UpdateEventStatusResponse, error)
}

type crawlerEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerEventServiceClient(cc grpc.ClientConnInterface) CrawlerEventServiceClient {
	return &crawlerEventServiceClient{cc}
}

func (c *crawlerEventServiceClient) CreateCrawlerEvent(ctx context.Context, in *CreateCrawlerEventRequest, opts ...grpc.CallOption) (*CreateCrawlerEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCrawlerEventResponse)
	err := c.cc.Invoke(ctx, CrawlerEventService_CreateCrawlerEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerEventServiceClient) GetCrawlerEvents(ctx context.Context, in *GetCrawlerEventsRequest, opts ...grpc.CallOption) (*GetCrawlerEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCrawlerEventsResponse)
	err := c.cc.Invoke(ctx, CrawlerEventService_GetCrawlerEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerEventServiceClient) UpdateCrawlerEvent(ctx context.Context, in *UpdateCrawlerEventRequest, opts ...grpc.CallOption) (*UpdateCrawlerEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCrawlerEventResponse)
	err := c.cc.Invoke(ctx, CrawlerEventService_UpdateCrawlerEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerEventServiceClient) UpdateEventStatus(ctx context.Context, in *UpdateEventStatusRequest, opts ...grpc.CallOption) (*UpdateEventStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEventStatusResponse)
	err := c.cc.Invoke(ctx, CrawlerEventService_UpdateEventStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlerEventServiceServer is the server API for CrawlerEventService service.
// All implementations must embed UnimplementedCrawlerEventServiceServer
// for forward compatibility.
type CrawlerEventServiceServer interface {
	CreateCrawlerEvent(context.Context, *CreateCrawlerEventRequest) (*CreateCrawlerEventResponse, error)
	GetCrawlerEvents(context.Context, *GetCrawlerEventsRequest) (*GetCrawlerEventsResponse, error)
	UpdateCrawlerEvent(context.Context, *UpdateCrawlerEventRequest) (*UpdateCrawlerEventResponse, error)
	UpdateEventStatus(context.Context, *UpdateEventStatusRequest) (*UpdateEventStatusResponse, error)
	mustEmbedUnimplementedCrawlerEventServiceServer()
}

// UnimplementedCrawlerEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrawlerEventServiceServer struct{}

func (UnimplementedCrawlerEventServiceServer) CreateCrawlerEvent(context.Context, *CreateCrawlerEventRequest) (*CreateCrawlerEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrawlerEvent not implemented")
}
func (UnimplementedCrawlerEventServiceServer) GetCrawlerEvents(context.Context, *GetCrawlerEventsRequest) (*GetCrawlerEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrawlerEvents not implemented")
}
func (UnimplementedCrawlerEventServiceServer) UpdateCrawlerEvent(context.Context, *UpdateCrawlerEventRequest) (*UpdateCrawlerEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrawlerEvent not implemented")
}
func (UnimplementedCrawlerEventServiceServer) UpdateEventStatus(context.Context, *UpdateEventStatusRequest) (*UpdateEventStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventStatus not implemented")
}
func (UnimplementedCrawlerEventServiceServer) mustEmbedUnimplementedCrawlerEventServiceServer() {}
func (UnimplementedCrawlerEventServiceServer) testEmbeddedByValue()                             {}

// UnsafeCrawlerEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerEventServiceServer will
// result in compilation errors.
type UnsafeCrawlerEventServiceServer interface {
	mustEmbedUnimplementedCrawlerEventServiceServer()
}

func RegisterCrawlerEventServiceServer(s grpc.ServiceRegistrar, srv CrawlerEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedCrawlerEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CrawlerEventService_ServiceDesc, srv)
}

func _CrawlerEventService_CreateCrawlerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCrawlerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerEventServiceServer).CreateCrawlerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrawlerEventService_CreateCrawlerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerEventServiceServer).CreateCrawlerEvent(ctx, req.(*CreateCrawlerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlerEventService_GetCrawlerEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrawlerEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerEventServiceServer).GetCrawlerEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrawlerEventService_GetCrawlerEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerEventServiceServer).GetCrawlerEvents(ctx, req.(*GetCrawlerEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlerEventService_UpdateCrawlerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCrawlerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerEventServiceServer).UpdateCrawlerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrawlerEventService_UpdateCrawlerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerEventServiceServer).UpdateCrawlerEvent(ctx, req.(*UpdateCrawlerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlerEventService_UpdateEventStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerEventServiceServer).UpdateEventStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrawlerEventService_UpdateEventStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerEventServiceServer).UpdateEventStatus(ctx, req.(*UpdateEventStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrawlerEventService_ServiceDesc is the grpc.ServiceDesc for CrawlerEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrawlerEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.v1.CrawlerEventService",
	HandlerType: (*CrawlerEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrawlerEvent",
			Handler:    _CrawlerEventService_CreateCrawlerEvent_Handler,
		},
		{
			MethodName: "GetCrawlerEvents",
			Handler:    _CrawlerEventService_GetCrawlerEvents_Handler,
		},
		{
			MethodName: "UpdateCrawlerEvent",
			Handler:    _CrawlerEventService_UpdateCrawlerEvent_Handler,
		},
		{
			MethodName: "UpdateEventStatus",
			Handler:    _CrawlerEventService_UpdateEventStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/crawler_event.proto",
}
