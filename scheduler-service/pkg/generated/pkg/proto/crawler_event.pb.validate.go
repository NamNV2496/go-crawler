// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/crawler_event.proto

package crawlerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CrawlerEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CrawlerEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CrawlerEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CrawlerEventMultiError, or
// nil if none found.
func (m *CrawlerEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *CrawlerEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for Method

	// no validation rules for Description

	// no validation rules for Queue

	// no validation rules for Domain

	// no validation rules for IsActive

	// no validation rules for NextRunTime

	// no validation rules for RepeatTimes

	// no validation rules for SchedulerAt

	// no validation rules for Status

	// no validation rules for CronExp

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CrawlerEventMultiError(errors)
	}

	return nil
}

// CrawlerEventMultiError is an error wrapping multiple validation errors
// returned by CrawlerEvent.ValidateAll() if the designated constraints aren't met.
type CrawlerEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CrawlerEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CrawlerEventMultiError) AllErrors() []error { return m }

// CrawlerEventValidationError is the validation error returned by
// CrawlerEvent.Validate if the designated constraints aren't met.
type CrawlerEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CrawlerEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CrawlerEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CrawlerEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CrawlerEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CrawlerEventValidationError) ErrorName() string { return "CrawlerEventValidationError" }

// Error satisfies the builtin error interface
func (e CrawlerEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrawlerEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CrawlerEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CrawlerEventValidationError{}

// Validate checks the field values on CreateCrawlerEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCrawlerEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCrawlerEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCrawlerEventRequestMultiError, or nil if none found.
func (m *CreateCrawlerEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCrawlerEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCrawlerEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCrawlerEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCrawlerEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCrawlerEventRequestMultiError(errors)
	}

	return nil
}

// CreateCrawlerEventRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCrawlerEventRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateCrawlerEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCrawlerEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCrawlerEventRequestMultiError) AllErrors() []error { return m }

// CreateCrawlerEventRequestValidationError is the validation error returned by
// CreateCrawlerEventRequest.Validate if the designated constraints aren't met.
type CreateCrawlerEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCrawlerEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCrawlerEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCrawlerEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCrawlerEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCrawlerEventRequestValidationError) ErrorName() string {
	return "CreateCrawlerEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCrawlerEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCrawlerEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCrawlerEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCrawlerEventRequestValidationError{}

// Validate checks the field values on CreateCrawlerEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCrawlerEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCrawlerEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCrawlerEventResponseMultiError, or nil if none found.
func (m *CreateCrawlerEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCrawlerEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateCrawlerEventResponseMultiError(errors)
	}

	return nil
}

// CreateCrawlerEventResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCrawlerEventResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateCrawlerEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCrawlerEventResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCrawlerEventResponseMultiError) AllErrors() []error { return m }

// CreateCrawlerEventResponseValidationError is the validation error returned
// by CreateCrawlerEventResponse.Validate if the designated constraints aren't met.
type CreateCrawlerEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCrawlerEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCrawlerEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCrawlerEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCrawlerEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCrawlerEventResponseValidationError) ErrorName() string {
	return "CreateCrawlerEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCrawlerEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCrawlerEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCrawlerEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCrawlerEventResponseValidationError{}

// Validate checks the field values on GetCrawlerEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCrawlerEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCrawlerEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCrawlerEventsRequestMultiError, or nil if none found.
func (m *GetCrawlerEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCrawlerEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetCrawlerEventsRequestMultiError(errors)
	}

	return nil
}

// GetCrawlerEventsRequestMultiError is an error wrapping multiple validation
// errors returned by GetCrawlerEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCrawlerEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCrawlerEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCrawlerEventsRequestMultiError) AllErrors() []error { return m }

// GetCrawlerEventsRequestValidationError is the validation error returned by
// GetCrawlerEventsRequest.Validate if the designated constraints aren't met.
type GetCrawlerEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCrawlerEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCrawlerEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCrawlerEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCrawlerEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCrawlerEventsRequestValidationError) ErrorName() string {
	return "GetCrawlerEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCrawlerEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCrawlerEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCrawlerEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCrawlerEventsRequestValidationError{}

// Validate checks the field values on GetCrawlerEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCrawlerEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCrawlerEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCrawlerEventsResponseMultiError, or nil if none found.
func (m *GetCrawlerEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCrawlerEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCrawlerEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCrawlerEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCrawlerEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCrawlerEventsResponseMultiError(errors)
	}

	return nil
}

// GetCrawlerEventsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCrawlerEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCrawlerEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCrawlerEventsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCrawlerEventsResponseMultiError) AllErrors() []error { return m }

// GetCrawlerEventsResponseValidationError is the validation error returned by
// GetCrawlerEventsResponse.Validate if the designated constraints aren't met.
type GetCrawlerEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCrawlerEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCrawlerEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCrawlerEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCrawlerEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCrawlerEventsResponseValidationError) ErrorName() string {
	return "GetCrawlerEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCrawlerEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCrawlerEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCrawlerEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCrawlerEventsResponseValidationError{}

// Validate checks the field values on UpdateCrawlerEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCrawlerEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCrawlerEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCrawlerEventRequestMultiError, or nil if none found.
func (m *UpdateCrawlerEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCrawlerEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCrawlerEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCrawlerEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCrawlerEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCrawlerEventRequestMultiError(errors)
	}

	return nil
}

// UpdateCrawlerEventRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCrawlerEventRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateCrawlerEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCrawlerEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCrawlerEventRequestMultiError) AllErrors() []error { return m }

// UpdateCrawlerEventRequestValidationError is the validation error returned by
// UpdateCrawlerEventRequest.Validate if the designated constraints aren't met.
type UpdateCrawlerEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCrawlerEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCrawlerEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCrawlerEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCrawlerEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCrawlerEventRequestValidationError) ErrorName() string {
	return "UpdateCrawlerEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCrawlerEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCrawlerEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCrawlerEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCrawlerEventRequestValidationError{}

// Validate checks the field values on UpdateCrawlerEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCrawlerEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCrawlerEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCrawlerEventResponseMultiError, or nil if none found.
func (m *UpdateCrawlerEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCrawlerEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateCrawlerEventResponseMultiError(errors)
	}

	return nil
}

// UpdateCrawlerEventResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCrawlerEventResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateCrawlerEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCrawlerEventResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCrawlerEventResponseMultiError) AllErrors() []error { return m }

// UpdateCrawlerEventResponseValidationError is the validation error returned
// by UpdateCrawlerEventResponse.Validate if the designated constraints aren't met.
type UpdateCrawlerEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCrawlerEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCrawlerEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCrawlerEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCrawlerEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCrawlerEventResponseValidationError) ErrorName() string {
	return "UpdateCrawlerEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCrawlerEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCrawlerEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCrawlerEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCrawlerEventResponseValidationError{}

// Validate checks the field values on UpdateEventStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEventStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEventStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEventStatusRequestMultiError, or nil if none found.
func (m *UpdateEventStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEventStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateEventStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateEventStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEventStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEventStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventStatusRequestMultiError) AllErrors() []error { return m }

// UpdateEventStatusRequestValidationError is the validation error returned by
// UpdateEventStatusRequest.Validate if the designated constraints aren't met.
type UpdateEventStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventStatusRequestValidationError) ErrorName() string {
	return "UpdateEventStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventStatusRequestValidationError{}

// Validate checks the field values on UpdateEventStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEventStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEventStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEventStatusResponseMultiError, or nil if none found.
func (m *UpdateEventStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEventStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateEventStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateEventStatusResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEventStatusResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateEventStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventStatusResponseMultiError) AllErrors() []error { return m }

// UpdateEventStatusResponseValidationError is the validation error returned by
// UpdateEventStatusResponse.Validate if the designated constraints aren't met.
type UpdateEventStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventStatusResponseValidationError) ErrorName() string {
	return "UpdateEventStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventStatusResponseValidationError{}
